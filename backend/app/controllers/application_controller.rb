class ApplicationController < ActionController::API
  
  before_action :require_login
  
  def logged_in?
    !!session_user
  end

  def require_login
      render json: {message: 'Please Login'}, status: :unauthorized unless logged_in?}
  end

  def encode_token(payload)
    JWT.encode(payload, 'my_secret')
    # USE A BETTER SECRET
    # encode method is provided by jwt gem, used to generate token
    # "The method encode provided by the JWT gem will be utilized to generate a token. JWT.encode takes two arguments, the payload object and a string that represents a “secret”. The method encode_token will return the token generated by JWT."
  end

  def session_user
    decoded_hash = decoded_token
    if !decoded_has.empty?
      user_id = decoded_hash[0]['user_id']
      @user = User.find_by(id: user_id)
    else
      nil
    end
  end

  def auth_header
    request.headers['Authorization']
    # where does request come from??
  end

  # decoded_token calls another method, auth_header, which checks the request headers for a key of ‘Authorization’. When the request is sent from the front-end, it is usually in the format of, "Authorization": `Bearer ${jwt-token}`

  def decoded_token
    if auth_header
      token = auth_header.split(' ')[1]
      begin
          JWT.decode(token, 'my_secret', true, algorithm: 'HS256')
          # decode is from jwt gem
      rescue JWT::DecodeError
        []
      end
    end
  end

end
